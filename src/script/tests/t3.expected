ast: [(S_fn ("fib", ["n"],
         { bl_items =
           [(Bl_eval
               E_if {
                 test = (E_binop (Leq, (E_var "n"), (E_const (C_int 2))));
                 then_ = { bl_items = [(Bl_eval (E_const (C_int 1)))] };
                 elseif = [];
                 else_ =
                 (Some { bl_items =
                         [(Bl_eval
                             (E_binop (Plus,
                                (E_app ("fib",
                                   [(E_binop (Minus, (E_var "n"),
                                       (E_const (C_int 1))))
                                     ]
                                   )),
                                (E_app ("fib",
                                   [(E_binop (Minus, (E_var "n"),
                                       (E_const (C_int 2))))
                                     ]
                                   ))
                                )))
                           ]
                         })})
             ]
           }
         ));
       (S_eval (E_const (C_string "fib 5")));
       (S_eval (E_app ("fib", [(E_const (C_int 5))])));
       (S_eval (E_app ("fib", [(E_const (C_int 6))])));
       (S_eval (E_const (C_string "fib 12")));
       (S_eval (E_app ("fib", [(E_const (C_int 12))])));
       (S_eval (E_const (C_string "fib 24")));
       (S_eval (E_app ("fib", [(E_const (C_int 24))])))]
compiled stanzas:
  [(def `fib`
    chunk[1->1|1 local] {
      :instrs
       0        (rload 0) ; deref n
       1        (int 2)
       2        leq
       3        (jifn 6)
       4        (int 1) ; if
       5        (jmp 17)
       6        (rload 0) ; deref n
       7        (int 1)
       8        sub
       9        curch
       10       (call 1)
       11       (rload 0) ; deref n
       12       (int 2)
       13       sub
       14       curch
       15       (call 1)
       16       add
       17       ret
    });
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (lload 0) ; "fib 5"
             1        ret
            :locals
             0        "fib 5"
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (int 5)
             1        (lload 0) ; <chunk>
             2        (call 1)
             3        ret
            :locals
             0        chunk[1->1|1 local] {
                        :instrs
                         0        (rload 0) ; deref n
                         1        (int 2)
                         2        leq
                         3        (jifn 6)
                         4        (int 1) ; if
                         5        (jmp 17)
                         6        (rload 0) ; deref n
                         7        (int 1)
                         8        sub
                         9        curch
                         10       (call 1)
                         11       (rload 0) ; deref n
                         12       (int 2)
                         13       sub
                         14       curch
                         15       (call 1)
                         16       add
                         17       ret
                      }
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (int 6)
             1        (lload 0) ; <chunk>
             2        (call 1)
             3        ret
            :locals
             0        chunk[1->1|1 local] {
                        :instrs
                         0        (rload 0) ; deref n
                         1        (int 2)
                         2        leq
                         3        (jifn 6)
                         4        (int 1) ; if
                         5        (jmp 17)
                         6        (rload 0) ; deref n
                         7        (int 1)
                         8        sub
                         9        curch
                         10       (call 1)
                         11       (rload 0) ; deref n
                         12       (int 2)
                         13       sub
                         14       curch
                         15       (call 1)
                         16       add
                         17       ret
                      }
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (lload 0) ; "fib 12"
             1        ret
            :locals
             0        "fib 12"
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (int 12)
             1        (lload 0) ; <chunk>
             2        (call 1)
             3        ret
            :locals
             0        chunk[1->1|1 local] {
                        :instrs
                         0        (rload 0) ; deref n
                         1        (int 2)
                         2        leq
                         3        (jifn 6)
                         4        (int 1) ; if
                         5        (jmp 17)
                         6        (rload 0) ; deref n
                         7        (int 1)
                         8        sub
                         9        curch
                         10       (call 1)
                         11       (rload 0) ; deref n
                         12       (int 2)
                         13       sub
                         14       curch
                         15       (call 1)
                         16       add
                         17       ret
                      }
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (lload 0) ; "fib 24"
             1        ret
            :locals
             0        "fib 24"
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (int 24)
             1        (lload 0) ; <chunk>
             2        (call 1)
             3        ret
            :locals
             0        chunk[1->1|1 local] {
                        :instrs
                         0        (rload 0) ; deref n
                         1        (int 2)
                         2        leq
                         3        (jifn 6)
                         4        (int 1) ; if
                         5        (jmp 17)
                         6        (rload 0) ; deref n
                         7        (int 1)
                         8        sub
                         9        curch
                         10       (call 1)
                         11       (rload 0) ; deref n
                         12       (int 2)
                         13       sub
                         14       curch
                         15       (call 1)
                         16       add
                         17       ret
                      }
          })))]
(eval:
   "fib 5")
(eval:
   5)
(eval:
   8)
(eval:
   "fib 12")
(eval:
   144)
(eval:
   "fib 24")
(eval:
   46368)
expected fib(5) = 5
expected fib(12) = 144
expected fib(24) = 46368
