ast: [(S_fn ("fact", ["n"],
         { bl_items =
           [(Bl_var ("i", (E_var "n")));
             (Bl_var ("res", (E_const (C_int 1))));
             (Bl_while ((E_binop (Gt, (E_var "i"), (E_const (C_int 0)))),
                { bl_items =
                  [(Bl_assign ("res",
                      (E_binop (Times, (E_var "res"), (E_var "i")))));
                    (Bl_assign ("i",
                       (E_binop (Minus, (E_var "i"), (E_const (C_int 1))))))
                    ]
                  }
                ));
             (Bl_eval (E_var "res"))]
           }
         ));
       (S_eval (E_app ("fact", [(E_const (C_int 5))])));
       (S_eval
          E_if {test = (E_const (C_bool true));
            then_ = { bl_items = [(Bl_eval (E_const (C_string "a")))] };
            elseif = [];
            else_ =
            (Some { bl_items = [(Bl_eval (E_const (C_string "false")))] })});
       (S_eval
          (E_block
             { bl_items =
               [(Bl_let ("x",
                   E_if {test = (E_const (C_bool false));
                     then_ =
                     { bl_items = [(Bl_eval (E_const (C_string "a")))] };
                     elseif =
                     [((E_binop (Eq, (E_const (C_int 1)), (E_const (C_int 2))
                          )),
                       { bl_items = [(Bl_eval (E_const (C_string "b")))] })];
                     else_ =
                     (Some { bl_items = [(Bl_eval (E_const (C_string "c")))]
                             })}
                   ));
                 (Bl_eval (E_var "x"))]
               }));
       (S_eval (E_const (C_string "big sum:")));
       (S_eval
          (E_block
             { bl_items =
               [(Bl_let ("x", (E_app ("fact", [(E_const (C_int 5))]))));
                 (Bl_let ("y", (E_app ("fact", [(E_const (C_int 6))]))));
                 (Bl_let ("z",
                    (E_app ("fact", [(E_app ("fact", [(E_const (C_int 4))]))]
                       ))
                    ));
                 (Bl_eval
                    (E_binop (Plus,
                       (E_binop (Plus, (E_var "x"), (E_var "y"))),
                       (E_var "z"))))
                 ]
               }))
       ]
compiled stanzas:
  [(def `fact`
    chunk[1->1|3 local] {
      :instrs
       0        (rload 0) ; deref n
       1        (rstore 1) ; var i
       2        (int 1)
       3        (rstore 2) ; var res
       4        (int 0)
       5        (rload 1) ; deref i
       6        lt
       7        (jifn 17) ; exit while
       8        (rload 2) ; deref res
       9        (rload 1) ; deref i
       10       mult
       11       (rstore 2)
       12       (rload 1) ; deref i
       13       (int 1)
       14       sub
       15       (rstore 1)
       16       (jmp 4)
       17       (rload 2) ; deref res
       18       ret
    });
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (int 5)
             1        (lload 0) ; <chunk>
             2        (call 1)
             3        ret
            :locals
             0        chunk[1->1|3 local] {
                        :instrs
                         0        (rload 0) ; deref n
                         1        (rstore 1) ; var i
                         2        (int 1)
                         3        (rstore 2) ; var res
                         4        (int 0)
                         5        (rload 1) ; deref i
                         6        lt
                         7        (jifn 17) ; exit while
                         8        (rload 2) ; deref res
                         9        (rload 1) ; deref i
                         10       mult
                         11       (rstore 2)
                         12       (rload 1) ; deref i
                         13       (int 1)
                         14       sub
                         15       (rstore 1)
                         16       (jmp 4)
                         17       (rload 2) ; deref res
                         18       ret
                      }
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (bool true)
             1        (jifn 4)
             2        (lload 0) ; "a"
             3        (jmp 5)
             4        (lload 1) ; "false"
             5        ret
            :locals
             0        "a"
             1        "false"
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|1 local] {
            :instrs
             0        (bool false)
             1        (jifn 4)
             2        (lload 0) ; "a"
             3        (jmp 11)
             4        (int 1)
             5        (int 2)
             6        eq
             7        (jifn 10)
             8        (lload 1) ; "b"
             9        (jmp 11)
             10       (lload 2) ; "c"
             11       (rstore 0) ; x
             12       (rload 0) ; deref x
             13       ret
            :locals
             0        "a"
             1        "b"
             2        "c"
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|0 local] {
            :instrs
             0        (lload 0) ; "big sum:"
             1        ret
            :locals
             0        "big sum:"
          })));
   (eval
    (thunk
     :st (lazy
          chunk[0->1|3 local] {
            :instrs
             0        (int 5)
             1        (lload 0) ; <chunk>
             2        (call 1)
             3        (rstore 0) ; x
             4        (int 6)
             5        (lload 0) ; <chunk>
             6        (call 1)
             7        (rstore 1) ; y
             8        (int 4)
             9        (lload 0) ; <chunk>
             10       (call 1)
             11       (lload 0) ; <chunk>
             12       (call 1)
             13       (rstore 2) ; z
             14       (rload 0) ; deref x
             15       (rload 1) ; deref y
             16       add
             17       (rload 2) ; deref z
             18       add
             19       ret
            :locals
             0        chunk[1->1|3 local] {
                        :instrs
                         0        (rload 0) ; deref n
                         1        (rstore 1) ; var i
                         2        (int 1)
                         3        (rstore 2) ; var res
                         4        (int 0)
                         5        (rload 1) ; deref i
                         6        lt
                         7        (jifn 17) ; exit while
                         8        (rload 2) ; deref res
                         9        (rload 1) ; deref i
                         10       mult
                         11       (rstore 2)
                         12       (rload 1) ; deref i
                         13       (int 1)
                         14       sub
                         15       (rstore 1)
                         16       (jmp 4)
                         17       (rload 2) ; deref res
                         18       ret
                      }
          })))]
(eval:
   120)
(eval:
   "a")
(eval:
   "c")
(eval:
   "big sum:")
(eval:
   1388186055525532488)
expected result for big sum:
   1388186055525532488
