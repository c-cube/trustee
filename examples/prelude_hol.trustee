
### The HOL prelude for Trustee

# TODO: RAppLeft/RAppRight

declare tau : type ;

def T : bool := let f := (\x: bool. x) in f = f ;

show (T = T) = T;

goal T = T
  by refl T
;

show T;
show T'Def;

show
  proof refl T end
end

show expr \x y z: bool. x = (y = z) end

theorem TrueIsTrue := T
by
  proof # more verbose than strictly required
    let expr e := \x: bool. x in
    let th1 := refl e in
    let th2 := sym DefTrue in
    bool_eq th1 th2
  end
end

# TODO: support attribute syntax `#[doc="theorem `(x=T)=x`"]`
theorem EqTrueElim := (x = T) = x
by
  proof
    let th1 := bool_eq_intro
      (bool_eq TrueIsTrue (sym (assume (x=T))))
      (bool_eq_intro (assume (x:bool)) TrueIsTrue)
    in
    sym th1
  end
end

theorem EqTrueIntro := x = (x = T) by proof sym EqTrueElim end end

# TODO: REqTrueIntro
# TODO: REqTrueElim

def forall : ('a -> bool) -> bool by DefForall
  := \(f: 'a -> bool). f = (\x:'a. T)
end

fixity forall := binder 12 end

show expr forall (x y : tau). x = y end

# TODO RForallSubst
# TODO RForallIntro

show DefForall end


def /\ (a b : bool) : bool by DefAnd
  := forall (f: bool -> bool -> bool). f a b = f T T
end

fixity /\ := rassoc 15 end

show expr T /\ a /\ b /\ c end

# TODO: import defs and theorems from rust prelude

show DefAnd end # TODO
