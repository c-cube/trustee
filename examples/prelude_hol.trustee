
; The HOL prelude for Trustee

; TODO: RAppLeft/RAppRight

; TODO: arity
(decl tau type)

(def T [] bool $ let f := (\x: bool. x) in f = f $)

(show $ (T = T) = T $)

(goal (prove $ T = T $) {
  (exact (refl T));
})

(show T)

; FIXME:
; eval T'Def;

(eval (refl T))

(show $ \x y z: bool. x = (y = z) $)

(theorem TrueIsTrue (prove $ T $) {
  (exact {
    (let e $\x: bool. x$)
    (let th1 (refl e))
    (let th2 (sym DefTrue))
    (bool_eq th1 th2)
  })
})

; TODO: support attribute syntax `#[doc="theorem `(x=T)=x`"]`
(theorem EqTrueElim (prove $(x = T) = x$) {
  (have th1 (prove $x = (x = T)$)
    (exact (bool_eq_intro
      (bool_eq TrueIsTrue (sym (assume $x=T$)))
      (bool_eq_intro (assume $(x:bool)$) TrueIsTrue))))
  (qed (exact sym th1))
})

(theorem EqTrueIntro
  $x = (x = T)$ {
  (exact (sym EqTrueElim))
})

; TODO: REqTrueIntro
; TODO: REqTrueElim

(def forall [(a $(a -> bool) -> bool$)] bool $ \(f: a -> bool). f = (\x:a. T) $)

(fixity forall (binder 12))

(show $ forall (x y : tau). x = y $)

; TODO RForallSubst
; TODO RForallIntro

; FIXME
; eval Forall'Def;

(def /\ [(a bool) (b bool)] bool
  $ forall (f: bool -> bool -> bool). f a b = f T T $)

(fixity /\ (rassoc 18)) ; above ==>

(show $ T /\ a /\ b /\ c $)

; TODO: import defs and theorems from rust prelude

; FIXME
;eval And'Def;
