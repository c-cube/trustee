
// The HOL prelude for Trustee

// TODO: RAppLeft/RAppRight

declare tau : type;

def T : bool := let f := (\x: bool. x) in f = f ;

show (T = T) = T;

goal T = T {
  exact refl T;
};

show T;
eval T'Def;
eval refl T;

show \x y z: bool. x = (y = z);

theorem TrueIsTrue := T {
  exact {
    let e := $\x: bool. x$;
    let th1 := refl e;
    let th2 := sym DefTrue;
    bool_eq th1 th2
  }
};

// TODO: support attribute syntax `#[doc="theorem `(x=T)=x`"]`
theorem EqTrueElim := (x = T) = x {
  have th1 := bool_eq_intro
    (bool_eq TrueIsTrue (sym (assume $x=T$)))
    (bool_eq_intro (assume $(x:bool)$) TrueIsTrue);
  exact sym th1;
};

theorem EqTrueIntro := x = (x = T) {
  exact sym EqTrueElim;
};

// TODO: REqTrueIntro
// TODO: REqTrueElim

def forall a : (a -> bool) -> bool := \(f: a -> bool). f = (\x:a. T);

fixity forall := binder 12;

show forall (x y : tau). x = y ;

// TODO RForallSubst
// TODO RForallIntro

eval Forall'Def;


def /\ (a b : bool) : bool
  := forall (f: bool -> bool -> bool). f a b = f T T;

fixity /\ := rassoc 18; // above ==>

show T /\ a /\ b /\ c;

// TODO: import defs and theorems from rust prelude

eval And'Def; // TODO
